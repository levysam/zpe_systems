package handlers

import (
	requestContext "go-skeleton/internal/application/context"
	"go-skeleton/internal/application/domain/{{domain}}"
	"go-skeleton/internal/application/providers/filters"
	"go-skeleton/internal/application/providers/pagination"
	_ "go-skeleton/internal/application/services"
	{{domainCamelCase}}Create "go-skeleton/internal/application/services/{{domain}}/CREATE"
	{{domainCamelCase}}Delete "go-skeleton/internal/application/services/{{domain}}/DELETE"
	{{domainCamelCase}}Edit "go-skeleton/internal/application/services/{{domain}}/EDIT"
	{{domainCamelCase}}Get "go-skeleton/internal/application/services/{{domain}}/GET"
	{{domainCamelCase}}List "go-skeleton/internal/application/services/{{domain}}/LIST"
	{{domainCamelCase}}Repository "go-skeleton/internal/repositories/{{domain}}"
	"go-skeleton/pkg/idCreator"
	"go-skeleton/pkg/logger"
	"go-skeleton/pkg/registry"
	"go-skeleton/pkg/validator"
	"net/http"

	"github.com/labstack/echo/v4"
)

type {{domainPascalCase}}Handlers struct {
	{{domainPascalCase}}Repository *{{domainCamelCase}}Repository.{{domainPascalCase}}Repository

	logger    *logger.Logger
	idCreator *idCreator.IdCreator
	validator *validator.Validator
}

func New{{domainPascalCase}}Handlers(reg *registry.Registry) *{{domainPascalCase}}Handlers {
	return &{{domainPascalCase}}Handlers{
		{{domainPascalCase}}Repository: reg.Inject("{{domainCamelCase}}Repository").(*{{domainCamelCase}}Repository.{{domainPascalCase}}Repository),
		logger:          reg.Inject("logger").(*logger.Logger),
		idCreator:       reg.Inject("idCreator").(*idCreator.IdCreator),
		validator:       reg.Inject("validator").(*validator.Validator),
	}
}

// HandleGet{{domainPascalCase}} Get {{domainPascalCase}}
// @Summary      Get a {{domainPascalCase}}
// @Tags         {{domainPascalCase}}
// @Accept       json
// @Produce      json
// @Param        {{domainCamelCase}}_id path string true "{{domainPascalCase}} ID"
// @Param        Tenant header string false "tenant name"
// @Success      200  {object}  {{domainCamelCase}}Get.Response
// @Failure      400  {object}  services.Error
// @Failure      404  {object}  services.Error
// @Failure      500  {object}  services.Error
// @Router       /{{domainCamelCase}}/{{{domainCamelCase}}_id} [get]
func (hs *{{domainPascalCase}}Handlers) HandleGet{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}Get.NewService(hs.logger, hs.{{domainPascalCase}}Repository)
	data := new({{domainCamelCase}}Get.Data)

	if errors := context.Bind(data); errors != nil {
		return context.JSON(422, errors)
	}
	tenant := context.Get("tenant").(string)
	request := {{domainCamelCase}}Get.NewRequest(data)
	ctx := requestContext.NewPrepareContext(tenant)
	ctx.SetContext(request.Domain)
	s.Execute(
		request,
	)

	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(http.StatusOK, response)
}

// HandleCreate{{domainPascalCase}} Create {{domainPascalCase}}
// @Summary      Create {{domainPascalCase}}
// @Tags         {{domainPascalCase}}
// @Accept       json
// @Produce      json
// @Param        request body {{domainCamelCase}}Create.Data true "body model"
// @Param        Tenant header string false "tenant name"
// @Success      200  {object}  {{domainCamelCase}}Create.Response
// @Failure      400  {object}  services.Error
// @Failure      404  {object}  services.Error
// @Failure      500  {object}  services.Error
// @Router       /{{domainCamelCase}} [post]
func (hs *{{domainPascalCase}}Handlers) HandleCreate{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}Create.NewService(hs.logger, hs.{{domainPascalCase}}Repository, hs.idCreator)
	data := new({{domainCamelCase}}Create.Data)

	if errors := context.Bind(data); errors != nil {
		return context.JSON(http.StatusBadRequest, errors)
	}
	tenant := context.Get("tenant").(string)
	request := {{domainCamelCase}}Create.NewRequest(data, hs.validator)
	ctx := requestContext.NewPrepareContext(tenant)
	ctx.SetContext(request.Domain)
	s.Execute(
		request,
	)

	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(http.StatusCreated, response)
}

// HandleEdit{{domainPascalCase}} Edit {{domainPascalCase}}
// @Summary      Edit {{domainPascalCase}}
// @Tags         {{domainPascalCase}}
// @Accept       json
// @Produce      json
// @Param        {{domainCamelCase}}_id path string true "{{domainPascalCase}} ID"
// @Param        request body {{domainCamelCase}}Edit.Data true "body model"
// @Param        Tenant header string false "tenant name"
// @Success      200  {object}  {{domainCamelCase}}Edit.Response
// @Failure      400  {object}  services.Error
// @Failure      404  {object}  services.Error
// @Failure      500  {object}  services.Error
// @Router       /{{domainCamelCase}}/{{{domainCamelCase}}_id} [put]
func (hs *{{domainPascalCase}}Handlers) HandleEdit{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}Edit.NewService(hs.logger, hs.{{domainPascalCase}}Repository)
	data := new({{domainCamelCase}}Edit.Data)

	id := context.Param("id")
	if errors := context.Bind(data); errors != nil {
		return context.JSON(http.StatusBadRequest, errors)
	}

	tenant := context.Get("tenant").(string)
	request := {{domainCamelCase}}Edit.NewRequest(id, data, hs.validator)
	ctx := requestContext.NewPrepareContext(tenant)
	ctx.SetContext(request.Domain)
	s.Execute(
		request,
	)

	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(http.StatusOK, response)
}

// HandleList{{domainPascalCase}} List {{domainPascalCase}}
// @Summary      List {{domainPascalCase}}
// @Tags         {{domainPascalCase}}
// @Accept       json
// @Produce      json
// @Param        page  query   int  true  "valid int"
// @Param        Tenant header string false "tenant name"
// @Success      200  {object}  {{domainCamelCase}}List.Response
// @Failure      400  {object}  services.Error
// @Failure      404  {object}  services.Error
// @Failure      500  {object}  services.Error
// @Router       /{{domainCamelCase}} [get]
func (hs *{{domainPascalCase}}Handlers) HandleList{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}List.NewService(
		hs.logger,
		hs.{{domainPascalCase}}Repository,
		pagination.NewPaginationProvider[{{domain}}.{{domainPascalCase}}](hs.{{domainPascalCase}}Repository),
	)

	data := new({{domainCamelCase}}List.Data)
	bindErr := echo.QueryParamsBinder(context).
		Int("page", &data.Page).
		String("id", &data.ID).
		BindErrors()

	if bindErr != nil {
		return context.JSON(http.StatusBadRequest, bindErr)
	}

	f := filters.NewFilters()

	tenant := context.Get("tenant").(string)
	request := {{domainCamelCase}}List.NewRequest(data, f)
	ctx := requestContext.NewPrepareContext(tenant)
	ctx.SetContext(request.Domain)
	s.Execute(
		request,
	)

	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(http.StatusOK, response)
}

// HandleDelete{{domainPascalCase}} Delete {{domainPascalCase}}
// @Summary      Delete {{domainPascalCase}}
// @Tags         {{domainPascalCase}}
// @Accept       json
// @Produce      json
// @Param        Tenant header string false "tenant name"
// @Param        {{domainCamelCase}}_id path string true "{{domainPascalCase}} ID"
// @Success      200  {object}  {{domainCamelCase}}Delete.Response
// @Failure      400  {object}  services.Error
// @Failure      404  {object}  services.Error
// @Failure      500  {object}  services.Error
// @Router       /{{domainCamelCase}}/{{{domainCamelCase}}_id} [delete]
func (hs *{{domainPascalCase}}Handlers) HandleDelete{{domainPascalCase}}(context echo.Context) error {
	s := {{domainCamelCase}}Delete.NewService(hs.logger, hs.{{domainPascalCase}}Repository)
	data := new({{domainCamelCase}}Delete.Data)

	if errors := context.Bind(data); errors != nil {
		return context.JSON(http.StatusBadRequest, errors)
	}

	tenant := context.Get("tenant").(string)
	request := {{domainCamelCase}}Delete.NewRequest(data)
	ctx := requestContext.NewPrepareContext(tenant)
	ctx.SetContext(request.Domain)
	s.Execute(
		request,
	)

	response, err := s.GetResponse()
	if err != nil {
		return context.JSON(err.Status, err)
	}
	return context.JSON(http.StatusOK, response)
}
