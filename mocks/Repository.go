// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	dummy "go-skeleton/internal/application/domain/dummy"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: d
func (_m *Repository) Create(d *dummy.Dummy) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dummy.Dummy) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: d
func (_m *Repository) Delete(d *dummy.Dummy) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dummy.Dummy) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edit provides a mock function with given fields: d
func (_m *Repository) Edit(d *dummy.Dummy) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dummy.Dummy) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *Repository) Get(id string) (*dummy.Dummy, error) {
	ret := _m.Called(id)

	var r0 *dummy.Dummy
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dummy.Dummy, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *dummy.Dummy); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dummy.Dummy)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *Repository) List() (*[]dummy.Dummy, error) {
	ret := _m.Called()

	var r0 *[]dummy.Dummy
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]dummy.Dummy, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]dummy.Dummy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dummy.Dummy)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
