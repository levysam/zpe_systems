// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Critical provides a mock function with given fields: Error, Context
func (_m *Logger) Critical(Error error, Context ...string) {
	_va := make([]interface{}, len(Context))
	for _i := range Context {
		_va[_i] = Context[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, Error)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Debug provides a mock function with given fields: Message, Context
func (_m *Logger) Debug(Message string, Context ...string) {
	_va := make([]interface{}, len(Context))
	for _i := range Context {
		_va[_i] = Context[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, Message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: Error, Context
func (_m *Logger) Error(Error error, Context ...string) {
	_va := make([]interface{}, len(Context))
	for _i := range Context {
		_va[_i] = Context[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, Error)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: Message, Context
func (_m *Logger) Info(Message string, Context ...string) {
	_va := make([]interface{}, len(Context))
	for _i := range Context {
		_va[_i] = Context[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, Message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Warning provides a mock function with given fields: Message, Context
func (_m *Logger) Warning(Message string, Context ...string) {
	_va := make([]interface{}, len(Context))
	for _i := range Context {
		_va[_i] = Context[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, Message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
